#version 450

const float epsilon = 0.00000001;

layout (binding = 0) uniform ParameterUBO {
    ivec2 screenSize;
    mat4 view;
    mat4 proj;
} ubo;

layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

struct Material {
    vec4 color;
    float reflective;
    float refractiv; // not used
};

struct Primitive {
    vec4 data;
    uint type;
    Material material;
};

layout (std430, binding = 2) readonly buffer PrimitivesSSBO {
    uint primitiveCount;
    Primitive primitives[ ];
};

struct Light {
    vec4 position;
    vec4 color;
};

layout (std430, binding = 3) readonly buffer LightSSBO {
    uint lightCount;
    Light lights[ ];
};

layout (std430, binding = 4) readonly buffer GridDistancesSSBO {
    float SDFGrid[ ];
};

struct Grid {
    uint index;
    uvec3 size;
    Material material;
    mat4 inverseMatrix;
};

layout (std430, binding = 5) readonly buffer GridSSBO {
    uint gridCount;
    Grid grids[ ];
};

struct OctreeNode {
    float values[8];
    uint offset;
};

layout (std430, binding = 6) readonly buffer OctreeNodesSSBO {
    OctreeNode octreeNodes[ ];
};

struct Octree {
    uint index;
    uint size;
    Material material;
    mat4 inverseMatrix;
};

layout (std430, binding = 7) readonly buffer OctreesSSBO {
    uint octreeCount;
    Octree octrees[ ];
};

struct Ray {
    vec4 origin;
    vec4 direction;
};

struct Distance {
    float d;
    Material material;
};

struct Hit {
    bool isHit;
    vec4 point;
    vec4 normal;
    Material material;
};

Hit noHit() {
    Hit h;
    h.isHit = false;
    return h;
}

Hit isHit(vec4 point, vec4 normal, Material material) {
    Hit h;
    h.isHit = true;
    h.point = point;
    h.normal = normal,
    h.material = material;
    return h;
}

Ray screenToRay() {
    vec2 sc = 2.0 * (vec2(gl_GlobalInvocationID.xy) - vec2(0.5, 0.5)) / vec2(ubo.screenSize.xy) - 1.0;
    sc = -sc;

    vec4 pos = ubo.view * ubo.proj * vec4(sc, 0.0, 1.0);
    pos /= pos.w;

    pos = normalize(pos - ubo.view * vec4(0.0, 0.0, 0.0, 1.0));

    Ray r;
    r.origin = ubo.view * vec4(0.0, 0.0, 0.0, 1.0);
    r.direction = pos;

    return r;
}

float signedDistancePlane(vec4 position, vec4 plane) {
    return dot(position, plane) / length(vec3(plane));
}

float distancePlane(vec4 position, vec4 plane) {
    return abs(dot(position, plane)) / length(vec3(plane));
}

float signedDistanceSphere(vec4 position, vec4 sphere) {
    return length(position - vec4(sphere.xyz, 1.0)) - sphere.w;
}

float signedDistanceCube(vec4 position, vec4 cube){
    vec3 q = abs(position.xyz - cube.xyz) - cube.w;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float signedDistanceBox(vec3 position, vec3 box){
    vec3 q = abs(position) - box;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float signedDistanceGrid(vec4 position, Grid grid) {
    position = grid.inverseMatrix * position;

    float distanceToOuterCube = signedDistanceBox(vec3(position), vec3(1.0, 1.0, 1.0));

    if (distanceToOuterCube > 0.0) {
        return signedDistanceBox(vec3(position), 1.0 - vec3(0.5) / grid.size);
    }

    uvec3 pos = uvec3(vec3(position + 1.0) * 0.5 * vec3(grid.size - 1));

    float dist = 0.0;

    for (uint i = 0; i < 8; i++) {
        uvec3 vert = pos + uvec3(i % 2, (i >> 1) % 2, i >> 2);
        uint index = vert.x + vert.y * grid.size.x + vert.z * grid.size.x * grid.size.y;
        vec3 delta = 1.0 - abs(vec3(position + 1.0) * 0.5 * vec3(grid.size - 1) - vec3(vert));
        dist += SDFGrid[grid.index + index] * delta.x * delta.y * delta.z;
    }

    return dist;
}

float signedDistanceOctree(Ray ray, Octree octree) {
    
}

Distance minDistance(vec4 position) {
    Distance result;
    result.d = 100000000000000000000.0;
    float d = 0.0;

    for (uint i = 0; i < primitiveCount; i++) {
        if (primitives[i].type == 0) {
            d = distancePlane(position, primitives[i].data);
        } else if (primitives[i].type == 1) {
            d = signedDistanceSphere(position, primitives[i].data);
        } else if (primitives[i].type == 2) {
            d = signedDistanceCube(position, primitives[i].data);
        }
        if (d < result.d) {
            result.d = d;
            result.material = primitives[i].material;
        }
    }

    for (uint i = 0; i < gridCount; i++) {
        d = signedDistanceGrid(position, grids[i]);
        if (d < result.d) {
            result.d = d;
            result.material = grids[i].material;
        }
    }

    return result;
}

Hit spherecast(Ray ray) {
    float minDist = 0.001;
    float maxDist = 1000.0;
    float delta = minDist * 0.1;

    vec4 position = ray.origin;
    vec4 direction = normalize(ray.direction);

    Distance d = minDistance(position);
    uint count = 0;
    while (d.d > minDist && d.d < maxDist && count < 1000) {
        position += direction * d.d;
        d = minDistance(position);
        count++;
    }

    if (d.d > maxDist || count >= 1000) {
        return noHit();
    }

    Material m = d.material;
    float f = d.d;

    vec4 dx = vec4(1.0, 0.0, 0.0, 0.0) * delta;
    vec4 dy = vec4(0.0, 1.0, 0.0, 0.0) * delta;
    vec4 dz = vec4(0.0, 0.0, 1.0, 0.0) * delta;

    d = minDistance(position + dx);
    float dfdx = (d.d - f) / delta;
    d = minDistance(position + dy);
    float dfdy = (d.d - f) / delta;
    d = minDistance(position + dz);
    float dfdz = (d.d - f) / delta;

    vec4 normal = normalize(vec4(dfdx, dfdy, dfdz, 0.0));

    if (dot(normal, ray.direction) > epsilon) {
        normal = -normal;
    }

    return isHit(position, normal, m);
}

vec4 skyColor(vec4 direction) {
        float m = 0.0;
        if (abs(direction.x) > m) {
            m = abs(direction.x);
        }
        if (abs(direction.y) > m) {
            m = abs(direction.y);
        }
        if (abs(direction.z) > m) {
            m = abs(direction.z);
        }
        return (vec4(direction.xyz / m, 1.0) + 1.0) * 0.5;
}

vec4 getLightColor(vec4 point, vec4 normal) {
    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
    for (uint i = 0; i < lightCount; i++) {
        if (abs(lights[i].position.w) < epsilon) {
            color += lights[i].color * clamp(dot(normal, normalize(lights[i].position)), 0.0, 1.0);
        } else {
            vec4 lp = lights[i].position / lights[i].position.w;
            color += lights[i].color * clamp(dot(normal, normalize(lp - point)) / dot(lp - point, lp - point), 0.0, 1.0);
        }
    }
    return vec4(color.xyz, 1.0);
}

float hash(float t) {
    return fract(sin(7.289 * t + 11.23) * 23758.5453);
}

vec4 randomSphereDir(vec2 rnd) {
    float s = rnd.x * 3.1415 * 2.0;
    float t = rnd.y * 2.0 - 1.0;
    return vec4(sin(s), cos(s), t, 0.0) / sqrt(1.0 + t * t);
}

vec4 randomHemisphereDir(vec4 dir, float i) {
    vec4 v = randomSphereDir(vec2(hash(i + 1.0), hash(i + 2.0)));
    return v * sign(dot(v, dir));
}

float ambientOcclusion(Hit hit, float maxDist, float falloff ) {
    const int nbIte = 16;
    const float nbIteInv = 1.0 / float(nbIte);
    const float rad = 1.0 - 1.0 * nbIteInv; //Hemispherical factor (self occlusion correction)

    float ao = 0.0;

    for(int i = 0; i < nbIte; i++) {
        float l = hash(float(i)) * maxDist;
        vec4 rd = normalize(hit.normal + randomHemisphereDir(hit.normal, l) * rad) * l; // mix direction with the normal for self occlusion problems!

        ao += (l - max(minDistance(hit.point + rd).d, 0.0)) / maxDist * falloff;
    }

    return clamp(1.0 - ao * nbIteInv, 0.0, 1.0);
}

vec4 spheretrace() {
    Ray ray = screenToRay();

    Hit h = spherecast(ray);

    if (h.isHit) {
        return (1.0 + h.normal) * 0.5;
        return h.material.color * ambientOcclusion(h, 1.0, 1.0) * getLightColor(h.point + h.normal * 0.1, h.normal);
    } else {
        return skyColor(ray.direction);
    }
}

void main() {
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), spheretrace());
}